generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String?
  email              String              @unique
  profileImageUrl    String?
  aboutMe            String?
  websiteLink        String?
  contactEmail       String?
  totalEarnings      Int                 @default(0)
  withdrawnAmount    Int                 @default(0)
  createdAt          DateTime            @default(now())
  isAdmin            Boolean             @default(false)
  subscription       Json?
  earningsHistory    EarningsHistory[]
  models             Model[]
  notifications      Notification[]
  pendingModels      PendingModel[]
  purchasedModels    PurchasedModel[]
  withdrawalRequests WithdrawalRequest[]
}

model PurchasedModel {
  id          String   @id @default(uuid())
  modelId     String
  purchasedAt DateTime @default(now())
  price       Int
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model EarningsHistory {
  id                  String    @id @default(uuid())
  modelId             String
  modelName           String
  buyerEmail          String
  amount              Int
  lemonSqueezyOrderId String?
  earnedAt            DateTime  @default(now())
  releaseAt           DateTime?
  userId              String
  user                User      @relation(fields: [userId], references: [id])
}

model Model {
  id            String         @id @default(uuid())
  name          String
  authorId      String
  authorEmail   String
  tags          String[]
  description   String?
  features      String?
  useCases      String?
  setup         String
  imgUrl        String?
  fileStorage   Json?
  price         Int            @default(0)
  likes         Int            @default(0)
  likedBy       String[]
  purchasedBy   String[]
  downloads     Int            @default(0)
  createdAt     DateTime       @default(now())
  archived      Boolean        @default(false)
  author        User           @relation(fields: [authorId], references: [id])
  notifications Notification[]
}

model WithdrawalRequest {
  id             String    @id @default(uuid())
  userId         String
  paypalEmail    String
  amount         Int
  status         String    @default("pending")
  submittedAt    DateTime  @default(now())
  approvedAt     DateTime?
  rejectedReason String?
  user           User      @relation(fields: [userId], references: [id])
}

model Request {
  id          String    @id @default(uuid())
  title       String
  description String
  tags        String[]
  createdAt   DateTime  @default(now())
  authorEmail String
  comments    Comment[]
}

model Comment {
  id          String   @id @default(uuid())
  content     String
  requestId   String
  authorEmail String
  createdAt   DateTime @default(now())
  request     Request  @relation(fields: [requestId], references: [id])
}

model Notification {
  id             String   @id @default(uuid())
  userId         String
  userEmail      String
  type           String
  title          String
  message        String
  read           Boolean  @default(false)
  relatedModelId String?
  createdAt      DateTime @default(now())
  relatedModel   Model?   @relation(fields: [relatedModelId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
}

model PendingModel {
  id               String   @id @default(uuid())
  name             String
  authorId         String
  authorEmail      String
  tags             String[]
  description      String?
  features         String?
  useCases         String?
  setup            String
  imgUrl           String?
  fileStorage      Json?
  aiAnalysis       String?
  validationStatus Json?
  price            Int      @default(0)
  status           String   @default("pending")
  rejectionReason  String?
  createdAt        DateTime @default(now())
  author           User     @relation(fields: [authorId], references: [id])
}

model ArchivedModel {
  id                    String    @id @default(uuid())
  name                  String
  authorEmail           String
  purchasedBy           String[]
  fileStorage           Json?
  scheduledDeletionDate DateTime?
  createdAt             DateTime  @default(now())
}
